buildscript {
	ext {
		inHouseRepoHost='192.168.0.92:8081'
		springBoot='org.springframework.boot'
		springVersion='1.3.5.RELEASE'
		defaultEnc='UTF-8'
		javaVersion=1.8
	}
	ext.inHouseRepoHost='192.168.0.92:8081'
	println('aaa:' + project.hasProperty('inHouseRepositoryHost'))
	if(project.hasProperty('inHouseRepositoryHost')){
		println('aaa')
		ext.setProperty('inHouseRepoHost',getProperty('inHouseRepositoryHost'))
	}
	println("http://${inHouseRepoHost}/content/groups/public/")
	repositories {
	    maven{
	    	url "http://${inHouseRepoHost}/content/groups/public/"
	    }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springVersion}")
		classpath('com.bmuschko:gradle-nexus-plugin:2.3.1')
	}
}
buildscript {
	ext {
		hoge="123"
	}
}

allprojects {
	group = 'jp.co.seamark'
	version = '0.1-SNAPSHOT'
}

println(hoge)
subprojects {
	apply plugin: 'java'
	repositories {
	    maven{
	    	url "http://${inHouseRepoHost}/content/groups/public/"
	    }
	    jcenter()
	}
	dependencies {
	    compile 'org.slf4j:slf4j-api:1.7.18'
	
	    testCompile 'junit:junit:4.12'
	}
	
	tasks.withType(AbstractCompile)*.options*.encoding = defaultEnc
	tasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEnc
	
	compileJava {
		sourceCompatibility = javaVersion
		targetCompatibility = javaVersion
	}
	
	jar {
		baseName = "${project.name}"
	}
}

project(':app-project'){
	println(project.name)
	apply plugin: 'application'
	apply plugin: 'spring-boot'

	dependencies {
		compile( "org.springframework.boot:spring-boot-starter" )
	}
	
	mainClassName = 'jp.co.seamark.example.Application'
	jar {
		manifest {
			attributes 'Main-Class' : 'jp.co.seamark.example.Application'
		}
	}
}

project(':web-project'){
	println(project.name)
	apply plugin: 'spring-boot'

	dependencies {
		compile( "org.springframework.boot:spring-boot-starter-web")
	}
}

// for release
subprojects { prj ->
	apply plugin:'signing'
	apply plugin:'maven'
	apply plugin:'com.bmuschko.nexus'
	
//	group = 'jp.co.seamark'
//	artifact = 'example'
//	version = '0.1-SNAPSHOT'

	if( prj.pluginManager.hasPlugin('spring-boot') ){
		bootRepackage {
			classifier = 'executable'
		}
	}
	
	modifyPom {
		project {
			name 'Example Project'
			description 'Hogehoge'
			
			url 'https://github.com/kkamimura-seamark/example/wiki'
			inceptionYear '2012'
			
			scm {
				url 'https://github.com/kkamimura-seamark/example'
				connection 'scm:https://github.com/kkamimura-seamark/example.git'
				developerConnection 'scm:https://github.com/kkamimura-seamark/example.git'
			}
			
			licenses {
				license {
					name 'The Apache Software License,Version 2.0'
					url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution 'repo'
				}
			}
		}
	}
	
	extraArchive {
		sources = false
		tests = true
		javadoc = false
	}
	
	nexus {
// TODO siging pluginを確認する
//		sign = true
		sign = false
		repositoryUrl = 'http://192.168.0.92:8081/content/repositories/releases/'
		snapshotRepositoryUrl = 'http://192.168.0.92:8081/content/repositories/snapshots/'
	}
	
}
task clean {
}
task build {

}
task uploadArchives {

}