/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'kamimura' at '16/05/19 10:08' with Gradle 2.12
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.12/userguide/tutorial_java_projects.html
 */
buildscript {
	repositories {
		maven{ url 'http://192.168.0.160:8081/content/groups/public/'}
		jcenter()
	}
	
	dependencies {
		classpath 'com.bmuschko:gradle-docker-plugin:2.6.8'
	}
	ext {
		dockerRegistry = '192.168.0.158:5000'
	}
}

repositories {
	maven{ url  'http://192.168.0.160:8081/content/groups/public/' }
    jcenter()
    mavenCentral()
}

dependencies {
}


apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

docker {
	url = 'http://192.168.0.158:2375'
}

task createDockerfile(type: Dockerfile) {
	destFile = project.file('build/hoge/Dockerfile')
	from 'ubuntu:trusty'
	maintainer 'kkamimura@seamark.co.jp'
	runCommand  'apt-get update && apt-get -y upgrade && apt-get autoclean && apt-get clean'
	runCommand	'apt-get install -y aptitude && ' +
				'aptitude -y install language-pack-ja-base language-pack-ja && ' +
				'update-locale LANG=ja_JP.UTF-8 LANGUAGE="ja_JP:ja"' +
				' && apt-get autoclean && apt-get clean'
	environmentVariable 'LANG','ja_JP.UTF-8'
	environmentVariable 'LC_ALL','ja_JP.UTF-8'
	environmentVariable 'LC_CTYPE','ja_JP.UTF-8'
	
	def cmd = [
		'echo oracle-java8-installer shared/accepted-oracle-license-v1-1 select true | debconf-set-selections',
		'apt-get install -y software-properties-common',
		'add-apt-repository -y ppa:webupd8team/java',
		'apt-get update',
		'apt-get install -y oracle-java8-installer',
		'apt-get install -y git',
		'apt-get autoclean',
		'apt-get clean'
	].join(' && ')
	
	runCommand cmd
}

task buildImage(type: DockerBuildImage) {
	dependsOn createDockerfile
	inputDir = createDockerfile.destFile.parentFile
	tag = 'seamark/jdk8'
}

task buildJdkImage(type: DockerBuildImage) {
	inputDir = project.file('docker/jdk8')
	tag = 'seamark/jdk8:0.10'
}
task taggingJdkImage(type: DockerTagImage) {
	println('--> start');
	dependsOn buildJdkImage
	force = true
	imageId = buildJdkImage.getTag()

	println "${dockerRegistry}"
	repository = "localhost:5000/seamark/jdk8"
	tag = "latest"
	
	doLast {
		println('--> end');
	}
}


task pushJdk(type: DockerPushImage){
	dependsOn taggingJdkImage

	imageName = "localhost:5000/seamark/jdk8"
	tag = 'latest'

}